#!/bin/bash
set -Eeo pipefail

#unraid
mkdir -p /config/fail2ban
mkdir -p /config/userkeys
mkdir -p /config/sshd/keys

# Copy default config files if removed
if [[ ! -e /config/fail2ban/jail.conf ]]; then
	echo "$(date) [info] jail.conf missing from /config/fail2ban/... Replacing with default! Use only jail.local!"
	cp /etc/fail2ban/jail.conf /config/fail2ban/jail.conf
else
        echo "$(date) [info] Existing jail.conf found. Replacing with default! Use only jail.local!"
	rm /config/fail2ban/jail.conf
	cp "/etc/fail2ban/jail.conf" "/config/fail2ban/jail.conf"
fi

if [[ ! -e /config/fail2ban/jail.local ]]; then
	echo "$(date) [err] jail.local missing from /config/fail2ban/... Replacing with default backup!"
	cp /etc/default/schnuckz/fail2ban/jail.local /config/fail2ban/jail.local
	cp /config/fail2ban/jail.local /etc/fail2ban/jail.local
else
        echo "$(date) [info] Existing jail.local found. Copying to container filesystem!"
	rm /etc/fail2ban/jail.conf
	cp "/config/fail2ban/jail.conf" "/etc/fail2ban/jail.conf"
fi

if [[ ! -e /config/sshd/sshd_config ]]; then
	echo "$(date) [err] sshd_config missing from /config/sshd/... Replacing with default backup!"
	cp "/etc/default/schnuckz/sshd/sshd_config" "/config/sshd/sshd_config"
	cp "/config/sshd/sshd_config" "/etc/ssh/sshd_config"
else
        echo "$(date) [info] Existing sshd_config found. Copying to container filesystem!"
	rm /etc/ssh/sshd_config
	cp "/config/sshd/sshd_config" "/etc/ssh/sshd_config"
fi

# Log to /config/fail2ban
sed -i 's|^logtarget = /var/log/fail2ban.log|logtarget = /config/fail2ban/fail2ban.log|' /etc/fail2ban/fail2ban.conf

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

reArgsMaybe="^[^:[:space:]]+:.*$" # Smallest indication of attempt to use argument
reArgSkip='^([[:blank:]]*#.*|[[:blank:]]*)$' # comment or empty line

# Paths
userConfPath="/config/sshd/users.conf"
userConfPathLegacy="/etc/sftp-users.conf"
userConfFinalPath="/var/run/sftp/users.conf"

function log() {
    echo "[$0] $*" >&2
}

# Allow running other programs, e.g. bash
if [[ -z "$1" || "$1" =~ $reArgsMaybe ]]; then
    startSshd=true
else
    startSshd=false
fi

# Backward compatibility with legacy config path
if [ ! -f "$userConfPath" ] && [ -f "$userConfPathLegacy" ]; then
    mkdir -p "$(dirname $userConfPath)"
    ln -s "$userConfPathLegacy" "$userConfPath"
fi

# Create users only on first run
if [ ! -f "$userConfFinalPath" ]; then
    mkdir -p "$(dirname $userConfFinalPath)"

    if [ -f "$userConfPath" ]; then
        # Append mounted config to final config
        grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
    fi

    if $startSshd; then
        # Append users from arguments to final config
        for user in "$@"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    if [ -n "$SFTP_USERS" ]; then
        # Append users from environment variable to final config
        IFS=" " read -r -a usersFromEnv <<< "$SFTP_USERS"
        for user in "${usersFromEnv[@]}"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    # Check that we have users in config
    if [ -f "$userConfFinalPath" ] && [ "$(wc -l < "$userConfFinalPath")" -gt 0 ]; then
        # Import users from final conf file
        while IFS= read -r user || [[ -n "$user" ]]; do
            create-sftp-user "$user"
        done < "$userConfFinalPath"
    elif $startSshd; then
        log "FATAL: No users provided!"
        exit 3
    fi

    # Generate unique ssh keys for this container, if needed
    if [ ! -f /config/sshd/keys/ssh_host_ed25519_key ]; then
        ssh-keygen -t ed25519 -f /config/sshd/keys/ssh_host_ed25519_key -N ''
    fi
    if [ ! -f /config/sshd/keys/ssh_host_rsa_key ]; then
        ssh-keygen -t rsa -b 4096 -f /config/sshd/keys/ssh_host_rsa_key -N ''
    fi

    # Restrict access from other users
    chmod 600 /config/sshd/keys/ssh_host_ed25519_key || true
    chmod 600 /config/sshd/keys/ssh_host_rsa_key || true
fi

# Source custom scripts, if any
if [ -d /config/sshd/scripts ]; then
    for f in /config/sshd/scripts/*; do
        if [ -x "$f" ]; then
            log "Running $f ..."
            $f
        else
            log "Could not run $f, because it's missing execute permission (+x)."
        fi
    done
    unset f
fi

if [[ -e /var/run/fail2ban/fail2ban.sock ]]; then
	rm /var/run/fail2ban/fail2ban.sock
fi

if [[ -e /var/run/sshd.pid ]]; then
	rm /var/run/sshd.pid
fi

if [[ -e /var/log/auth.log ]]; then
	> /var/log/auth.log
fi

if $startSshd; then
    service inetutils-syslogd start
    log "Executing fail2ban"
    service fail2ban start
    log "Executing sshd"
    service ssh start
    tail -f /var/log/auth.log
else
    log "Executing $*"
    exec "$@"
fi
